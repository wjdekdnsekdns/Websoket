package com.example.demo.handler;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

@Component
public class ChatHandler2 extends TextWebSocketHandler {
    private final Map<String, List<WebSocketSession>> rooms = new HashMap<>();

    @Override
    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
        String payload = message.getPayload();
        String[] parts = payload.split(":");
        String roomId = parts[0];
        String msg = parts[1];

        // 방에 있는 모든 세션에 메시지 전송
        if (rooms.containsKey(roomId)) {
            for (WebSocketSession sess : rooms.get(roomId)) {
                sess.sendMessage(new TextMessage(msg));
            }
        }
    }

    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        // 클라이언트에서 방 ID를 입력해야 합니다
        // 여기서는 예시로 방 ID를 'default'로 설정
        String roomId = "default"; // 이 부분을 방 ID로 수정해야 합니다
        rooms.computeIfAbsent(roomId, k -> new ArrayList<>()).add(session);
        System.out.println(session + " 클라이언트 접속2");
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
        // 방에서 세션 제거
        for (List<WebSocketSession> sessions : rooms.values()) {
            sessions.remove(session);
        }
        System.out.println(session + " 클라이언트 접속 해제2");
    }
}